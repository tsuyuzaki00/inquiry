import pymel.core as pm

def lookMatrix():
    sel = pm.selected()[0]
    normalMatrix = pm.getAttr(sel + ".matrix")
    worldMatrix = pm.getAttr(sel + ".worldMatrix")
    parentMatrix = pm.getAttr(sel + ".parentMatrix")
    xformMatrix = pm.getAttr(sel + ".xformMatrix")
    inverseMatrix = pm.getAttr(sel + ".inverseMatrix")
    worldInverseMatrix = pm.getAttr(sel + ".worldInverseMatrix")
    parentInverseMatrix = pm.getAttr(sel + ".parentInverseMatrix")
    offsetParentMatrix = pm.getAttr(sel + ".offsetParentMatrix")

    with pm.window( title = 'lookMatrix' ):
        with pm.columnLayout():
            pm.text( label = "normalMatrixX : " + str(normalMatrix[0]))
            pm.text( label = "normalMatrixY : " + str(normalMatrix[1]))
            pm.text( label = "normalMatrixZ : " + str(normalMatrix[2]))
            pm.separator()
            pm.text( label = "normalMatrixT : " + str(normalMatrix[3]))
            pm.separator()
            pm.text( label = "worldMatrixX : " + str(worldMatrix[0]))
            pm.text( label = "worldMatrixY : " + str(worldMatrix[1]))
            pm.text( label = "worldMatrixZ : " + str(worldMatrix[2]))
            pm.separator()
            pm.text( label = "worldMatrixT : " + str(worldMatrix[3]))
            pm.separator()
            pm.text( label = "parentMatrixX : " + str(parentMatrix[0]))
            pm.text( label = "parentMatrixY : " + str(parentMatrix[1]))
            pm.text( label = "parentMatrixZ : " + str(parentMatrix[2]))
            pm.separator()
            pm.text( label = "parentMatrixT : " + str(parentMatrix[3]))
            pm.separator()
            pm.text( label = "xformMatrixX : " + str(xformMatrix[0]))
            pm.text( label = "xformMatrixY : " + str(xformMatrix[1]))
            pm.text( label = "xformMatrixZ : " + str(xformMatrix[2]))
            pm.separator()
            pm.text( label = "xformMatrixT : " + str(xformMatrix[3]))
            pm.separator()
            pm.text( label = "inverseMatrixX : " + str(inverseMatrix[0]))
            pm.text( label = "inverseMatrixY : " + str(inverseMatrix[1]))
            pm.text( label = "inverseMatrixZ : " + str(inverseMatrix[2]))
            pm.separator()
            pm.text( label = "inverseMatrixT : " + str(inverseMatrix[3]))
            pm.separator()
            pm.text( label = "inverseWorldMatrixX : " + str(worldInverseMatrix[0]))
            pm.text( label = "inverseWorldMatrixY : " + str(worldInverseMatrix[1]))
            pm.text( label = "inverseWorldMatrixZ : " + str(worldInverseMatrix[2]))
            pm.separator()
            pm.text( label = "inverseWorldMatrixT : " + str(worldInverseMatrix[3]))
            pm.separator()
            pm.text( label = "inverseParentMatrixX : " + str(parentInverseMatrix[0]))
            pm.text( label = "inverseParentMatrixY : " + str(parentInverseMatrix[1]))
            pm.text( label = "inverseParentMatrixZ : " + str(parentInverseMatrix[2]))
            pm.separator()
            pm.text( label = "inverseParentMatrixT : " + str(parentInverseMatrix[3]))
            pm.separator()
            pm.text( label = "offsetParentMatrixX : " + str(offsetParentMatrix[0]))
            pm.text( label = "offsetParentMatrixY : " + str(offsetParentMatrix[1]))
            pm.text( label = "offsetParentMatrixZ : " + str(offsetParentMatrix[2]))
            pm.separator()
            pm.text( label = "offsetParentMatrixT : " + str(offsetParentMatrix[3]))
            pm.separator()

            pm.button( label = 'print', c = 'from mainEdit import lookMatrix as ps; ps.main()')

def main():
    lookMatrix()